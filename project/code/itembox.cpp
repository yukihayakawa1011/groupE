//==========================================================
//
// アイテムボックス [itembox.cpp]
// Author : Soma Ishihara
//
//==========================================================
#include "itembox.h"
#include "spike.h"

//静的メンバ変数
CItemBox *CItemBox::m_pTop = nullptr;
CItemBox *CItemBox::m_pCur = nullptr;

// マクロ定義

//==========================================================
// コンストラクタ
//==========================================================
CItemBox::CItemBox()
{
	// 値のクリア
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

	// 自分自身をリストに追加
	if (m_pTop != NULL)
	{// 先頭が存在している場合
		m_pCur->m_pNext = this;	// 現在最後尾のオブジェクトのポインタにつなげる
		m_pPrev = m_pCur;
		m_pCur = this;	// 自分自身が最後尾になる
	}
	else
	{// 存在しない場合
		m_pTop = this;	// 自分自身が先頭になる
		m_pCur = this;	// 自分自身が最後尾になる
	}
}

//==========================================================
// デストラクタ
//==========================================================
CItemBox::~CItemBox()
{

}

//==========================================================
// 初期化処理
//==========================================================
HRESULT CItemBox::Init(void)
{
	return S_OK;
}

//==========================================================
// 終了処理
//==========================================================
void CItemBox::Uninit(void)
{
	// リストから自分自身を削除する
	if (m_pTop == this)
	{// 自身が先頭
		if (m_pNext != NULL)
		{// 次が存在している
			m_pTop = m_pNext;	// 次を先頭にする
			m_pNext->m_pPrev = NULL;	// 次の前のポインタを覚えていないようにする
		}
		else
		{// 存在していない
			m_pTop = NULL;	// 先頭がない状態にする
			m_pCur = NULL;	// 最後尾がない状態にする
		}
	}
	else if (m_pCur == this)
	{// 自身が最後尾
		if (m_pPrev != NULL)
		{// 次が存在している
			m_pCur = m_pPrev;			// 前を最後尾にする
			m_pPrev->m_pNext = NULL;	// 前の次のポインタを覚えていないようにする
		}
		else
		{// 存在していない
			m_pTop = NULL;	// 先頭がない状態にする
			m_pCur = NULL;	// 最後尾がない状態にする
		}
	}
	else
	{
		if (m_pNext != NULL)
		{
			m_pNext->m_pPrev = m_pPrev;	// 自身の次に前のポインタを覚えさせる
		}
		if (m_pPrev != NULL)
		{
			m_pPrev->m_pNext = m_pNext;	// 自身の前に次のポインタを覚えさせる
		}
	}

	Release();
}

//==========================================================
// 更新処理
//==========================================================
void CItemBox::Update(void)
{

}

//==========================================================
// 生成
//==========================================================
CItemBox *CItemBox::Create(void)
{
	CItemBox *pSample = nullptr;

	pSample = new CItemBox;

	if (pSample != nullptr)
	{
		// 初期化処理
		pSample->Init();
	}

	return pSample;
}

//==========================================================
// 排出
//==========================================================
void CItemBox::Emission(void)
{
	//CSpike::Create(m_pos, m_rot, 40.0f,);
}
