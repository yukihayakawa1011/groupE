//==========================================================
//
// スローの処理管理 [slow.cpp]
// Author : Ibuki Okusada
//
//==========================================================
#include "main.h"
#include "slow.h"
#include "manager.h"
#include "debugproc.h"

// マクロ定義
#define MAX_SLOWTIME	(5)		// スローの限界時間
#define BOOST_CNT		(10)	// スロー量増加タイマー

//==========================================================
// コンストラクタ
//==========================================================
CSlow::CSlow()
{
	// 値のクリア
	m_b = false;
	m_nTimeCnt = 0;
	m_nTimer = 0;
}

//==========================================================
// デストラクタ
//==========================================================
CSlow::~CSlow()
{

}

//==========================================================
// 初期化処理
//==========================================================
void CSlow::Init(void)
{
	// 値のクリア
	m_b = false;
	m_nTimeCnt = 0;
	m_nTimer = 0;
}

//==========================================================
// 終了処理
//==========================================================
void CSlow::Uninit(void)
{

}

//==========================================================
// 更新処理
//==========================================================
void CSlow::Update(void)
{
	m_fMulOld = m_fAdd;

	if (m_nTimer > 0)
	{// スローにする
		m_nTimeCnt++;	// カウントアップ
		if (m_nTimeCnt % m_nTimer == 0)
		{// スローの規定値を超えた場合
			m_nTimeCnt = 0;

			if (m_bUse == false)
			{//使用しない場合
				m_nTimer--;
			}
			m_b = true;
		}
		else
		{// 規定値ではない
			m_b = false;
		}
	}
	else
	{// しない場合
		m_b = true;
	}

	if (m_nTimer > 0)
	{
		m_fAdd = 1.0f / (float)(m_nTimer);	// 位置フレーム辺りの倍率
	}
	else
	{
		if (m_fAdd <= 1.0f)
		{
			m_fAdd = 1.0f;
		}
	}
}

//==========================================================
// スロー状態取得
//==========================================================
float CSlow::Get(void)
{
	return m_fAdd;
}

//==========================================================
// スロー状態量設定
//==========================================================
void CSlow::SetSlow(bool bUse)
{
	// 使用状態設定
	m_bUse = bUse;

	if (m_bUse == true)
	{// 使用する場合
		m_nBoostCnt++;

		if (m_nBoostCnt % BOOST_CNT == 0)
		{// 規定値になった場合
			m_nBoostCnt = 0;

			if (m_nTimer < MAX_SLOWTIME)
			{// スローの最大値を超えていない場合
				m_nTimer++;
			}
		}
	}
}

//==========================================================
// 前回の倍率を取得
//==========================================================
float CSlow::GetOld(void)
{
	return m_fMulOld;
}