//===============================================
//
// オブジェクトの処理 [object.cpp]
// Author : Ibuki Okusada
//
//===============================================
#include "object.h"
#include "manager.h"
#include "renderer.h"
#include "camera.h"
#include "game.h"
#include "object_manager.h"

// マクロ定義

//===============================================
// 静的メンバ変数宣言
//===============================================

//===============================================
// コンストラクタ
//===============================================
//CObject::CObject()
//{
//}

//===============================================
// コンストラクタ(オーバーロード)
//===============================================
CObject::CObject(int nPriority)
{
	// 値のクリア
	m_pNext = NULL;
	m_pPrev = NULL;
	m_bDeath = false;
	m_bDraw = true;

	// 優先順位の確認
	if (nPriority < 0)
	{
		nPriority = 0;
	}
	else if (nPriority >= NUM_PRIORITY)
	{
		nPriority = NUM_PRIORITY - 1;
	}

	m_nPriority = nPriority;	// 設定

	// リストに挿入
	CObjectManager::GetInstance()->ListIn(this);
}

//===============================================
// デストラクタ
//===============================================
CObject::~CObject()
{
	
}

#if 0	// 純粋仮想関数なので通らない
//===============================================
// 初期化処理
//===============================================
HRESULT CObject::Init(void)
{

}
#endif

#if 0	// 純粋仮想関数なので通らない
//===============================================
// 終了処理
//===============================================
void CObject::Uninit(void)
{
	
}
#endif

#if 0	// 純粋仮想関数なので通らない
//===============================================
// 更新処理
//===============================================
void CObject::Update(void)
{

}
#endif

#if 0	// 純粋仮想関数なので通らない
//===============================================
// 描画処理
//===============================================
void CObject::Draw(void)
{

}
#endif

//===============================================
// オブジェクトの廃棄
//===============================================
void CObject::Release(void)
{
	// 死亡状態にする
	m_bDeath = true;
}

//===============================================
// タイプの設定
//===============================================
void CObject::SetType(const TYPE type)
{
	m_type = type;	// 種類を設定
}
